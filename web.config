html
Copy
Edit
<form method="POST">
    {% csrf_token %}
    <input type="text" name="username">
    <button type="submit">Submit</button>
</form>
For AJAX/Fetch Requests:

javascript
Copy
Edit
fetch('/login/', {
    method: 'POST',
    headers: {
        'Content-Type': 'application/json',
        'X-CSRFToken': getCookie('csrftoken')  // Ensure to send the CSRF token
    },
    body: JSON.stringify({ username: "test", password: "pass" })
});
For Django Rest Framework APIs:

You can use @csrf_exempt on the view if it's strictly an API endpoint.
Use Djangoâ€™s SessionAuthentication or Token-based authentication.
If Debugging Locally, You Can Temporarily Disable CSRF for Testing:

python
Copy
Edit
from django.views.decorators.csrf import csrf_exempt

@csrf_exempt
def my_view(request):
    return JsonResponse({"message": "CSRF exempted!"})
